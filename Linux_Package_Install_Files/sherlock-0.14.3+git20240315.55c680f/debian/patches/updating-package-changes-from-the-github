Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 sherlock (0.14.3+git20240315.55c680f-1) unstable; urgency=medium
 .
   * New upstream version 0.14.3+git20240315.55c680f
Author: Josenilson Ferreira da Silva <nilsonfsilva@hotmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2024-04-20

--- sherlock-0.14.3+git20240315.55c680f.orig/.pybuild/cpython3_3.11_sherlock/build/sherlock/sherlock.py
+++ sherlock-0.14.3+git20240315.55c680f/.pybuild/cpython3_3.11_sherlock/build/sherlock/sherlock.py
@@ -821,6 +821,7 @@ def main():
     except Exception as error:
         print(f"A problem occurred while checking for an update: {error}")
 
+    ### added by our team
     if args.name_search is not None:
         print(f"Conducting name search of \"{args.name_search}\" on google...")
         count = fullname_lookup(args.name_search)
@@ -828,6 +829,12 @@ def main():
         if len(args.username) == 0:
             sys.exit(1)
 
+    if len(args.username) == 0:
+        parser.print_usage()
+        print("You must have a username and/or name search argument.")
+        sys.exit(1)
+    ###
+
     # Argument check
     # TODO regex check on args.proxy
     if args.tor and (args.proxy is not None):
--- sherlock-0.14.3+git20240315.55c680f.orig/.pybuild/cpython3_3.11_sherlock/build/sherlock/wordlist_generator.py
+++ sherlock-0.14.3+git20240315.55c680f/.pybuild/cpython3_3.11_sherlock/build/sherlock/wordlist_generator.py
@@ -1,20 +1,11 @@
 # python script that should take in a raw txt file of words 
 # that have been accumulated from social media webpages 
 # preferably created by the target
-import sys
 import os
-import scrape
 
 def sorted_by_values(d): # return a sorted dictionary by values descending
     return {k: v for k, v in sorted(d.items(), key=lambda item: item[1], reverse=True)}
 
-# give an iterable (containing elements you want to write to file) and a filepath 
-# to write values to file in append mode
-def write_to_file(txt,filepath):
-    with open(filepath, 'a') as file:
-        for line in txt:
-            file.write(f"{line}\n")
-
 # can edit this function to filter out unnecessary words
 def create_wrd_map(filepath):
     word_freq = dict()
@@ -35,12 +26,13 @@ def generate_passwords(wmap, filepath):
     with open(filepath, 'a') as file:
         for wrd in wmap.keys():
             file.write(f"{wrd}\n") #write base word
-
+            file.write(f"{wrd[0].upper()+wrd[1:]}") #capital only
+            
             for i in range(10): # write all words starting with uppercase and ending with each digit
                 upper = wrd[0].upper() + wrd[1:]
                 file.write(f"{upper}{i}\n")
 
-def main(words_file_path, output_path='target_wordlist.txt'):
+def gen_wordlist(words_file_path, output_path='target_wordlist.txt'):
     words = create_wrd_map(words_file_path) # create word frequency map from txt file of words that were scraped
     words = sorted_by_values(words)
     
@@ -48,5 +40,4 @@ def main(words_file_path, output_path='t
     os.remove(words_file_path) # done with words txt file
     
 if __name__ == "__main__":
-    main()
-
+    gen_wordlist()
\ No newline at end of file
--- sherlock-0.14.3+git20240315.55c680f.orig/.pybuild/cpython3_3.12_sherlock/build/sherlock/sherlock.py
+++ sherlock-0.14.3+git20240315.55c680f/.pybuild/cpython3_3.12_sherlock/build/sherlock/sherlock.py
@@ -821,6 +821,7 @@ def main():
     except Exception as error:
         print(f"A problem occurred while checking for an update: {error}")
 
+    ### added by our team
     if args.name_search is not None:
         print(f"Conducting name search of \"{args.name_search}\" on google...")
         count = fullname_lookup(args.name_search)
@@ -828,6 +829,12 @@ def main():
         if len(args.username) == 0:
             sys.exit(1)
 
+    if len(args.username) == 0:
+        parser.print_usage()
+        print("You must have a username and/or name search argument.")
+        sys.exit(1)
+    ###
+
     # Argument check
     # TODO regex check on args.proxy
     if args.tor and (args.proxy is not None):
--- sherlock-0.14.3+git20240315.55c680f.orig/.pybuild/cpython3_3.12_sherlock/build/sherlock/wordlist_generator.py
+++ sherlock-0.14.3+git20240315.55c680f/.pybuild/cpython3_3.12_sherlock/build/sherlock/wordlist_generator.py
@@ -1,20 +1,11 @@
 # python script that should take in a raw txt file of words 
 # that have been accumulated from social media webpages 
 # preferably created by the target
-import sys
 import os
-import scrape
 
 def sorted_by_values(d): # return a sorted dictionary by values descending
     return {k: v for k, v in sorted(d.items(), key=lambda item: item[1], reverse=True)}
 
-# give an iterable (containing elements you want to write to file) and a filepath 
-# to write values to file in append mode
-def write_to_file(txt,filepath):
-    with open(filepath, 'a') as file:
-        for line in txt:
-            file.write(f"{line}\n")
-
 # can edit this function to filter out unnecessary words
 def create_wrd_map(filepath):
     word_freq = dict()
@@ -35,12 +26,13 @@ def generate_passwords(wmap, filepath):
     with open(filepath, 'a') as file:
         for wrd in wmap.keys():
             file.write(f"{wrd}\n") #write base word
-
+            file.write(f"{wrd[0].upper()+wrd[1:]}") #capital only
+            
             for i in range(10): # write all words starting with uppercase and ending with each digit
                 upper = wrd[0].upper() + wrd[1:]
                 file.write(f"{upper}{i}\n")
 
-def main(words_file_path, output_path='target_wordlist.txt'):
+def gen_wordlist(words_file_path, output_path='target_wordlist.txt'):
     words = create_wrd_map(words_file_path) # create word frequency map from txt file of words that were scraped
     words = sorted_by_values(words)
     
@@ -48,5 +40,4 @@ def main(words_file_path, output_path='t
     os.remove(words_file_path) # done with words txt file
     
 if __name__ == "__main__":
-    main()
-
+    gen_wordlist()
\ No newline at end of file
